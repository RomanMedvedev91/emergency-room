import { useQuery } from '@apollo/client';
import * as React from 'react';
import { useState } from 'react';
import { Container, Flex, Title } from '@mantine/core';
import { DragDropContext as DragDropContext1, type DragDropContextProps, type OnDragEndResponder } from 'react-beautiful-dnd';
import Head from 'next/head';

// import styles from '@/styles/Home.module.css';
import { GET_ROOMS, type IRoom } from '../queries/Room';
import Room from '../components/Room';


export default function Home() {
  const roomQuery = useQuery(GET_ROOMS, {
    onCompleted(data) {
      console.log('data: ', data);
    },
  });
  // const [rooms, setRooms] = useState([]);

  if (roomQuery.error) return <p>Error : {roomQuery.error.message}</p>;
  console.log('data: ', roomQuery.data);
  // const onDragEnd: OnDragEndResponder = (result) => {
  //   const { destination, source, draggableId } = result;
  //   if (!destination) {
  //     return;
  //   }
  //   if ( destination.droppableId === source.droppableId ) {
  //     return;
  //   }
  // const updatedRoomList = rooms && rooms.map((t: any) => {
  //   if (t._id === draggableId) {
  //     return {
  //       ...t,
  //       status: destination.droppableId
  //     }
  //   } else {
  //     return t;
  //   }
  // });
  // setRooms(updatedRoomList);
  // };

  // to avoid Type error: 'Draggable' cannot be used as a JSX component
  // const DragDropContext = DragDropContext1 as React.ComponentClass<DragDropContextProps>;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container size="xl" p={0}>
        <Title>Emergency Room</Title>
        {roomQuery.loading && <Title order={2}>Loading ...</Title>}
        {/* <DragDropContext onDragEnd={onDragEnd}> */}
        <Flex
          direction={{ base: 'column', sm: 'row' }}
          gap={{ base: 'md', sm: 'lg' }}
          justify="center"
          align={{ base: 'center', sm: 'flex-start' }}
          wrap="nowrap"
        >
          {roomQuery.data?.rooms?.map((room: IRoom) => (
            <Room key={room._id} roomData={room} />
          ))}
          {/* {state.columnOrder.map((columnId) => {
              const column = state.columns[columnId as keyof typeof state.columns];
              const tasks = column.taskIds.map(taskId => (
                state.tasks[taskId as keyof typeof state.tasks]
              ));
              return (
                <Stack
                  key={column.id}
                  sx={{
                    minHeight: '100%',
                    minWidth: '350px',
                  }}
                >
                  <Column
                    key={column.id}
                    column={column}
                    tasks={tasks}
                  />
                </Stack>
              );
            })} */}
        </Flex>
        {/* </DragDropContext> */}
      </Container>
      {/* <main className={styles.main}>
        <div className={styles.description}>
          <p>
            Get started by editing&nbsp;
            <code className={styles.code}>src/pages/index.tsx</code>
          </p>

        </div>
        <h2>My first Apollo app ðŸš€</h2>
        <br/>
        {loading ? <p>Loading...</p> : (
          <div>
            {data.getPatients.map(({ complainDescription, _id, firstName, lastName, order, status }: GetPatientsDataResponseType['getPatients'][number]) => (
              <div key={_id}>
                <h3>{`${firstName} ${lastName}`}</h3>
                <br />
                <b>About this client:</b>
                <p>{complainDescription}</p>
                <br />
                <p>Status:</p>
                <p>{status}</p>
                <br />
                <p>Order:</p>
                <h2>{order}</h2>
              </div>
            ))}
          </div>
        )}
      </main> */}
    </>
  );
}
